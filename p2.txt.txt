A* search>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



import heapq

def astar(graph, start, goal, heuristic):
    open_set = [(0, start)]
    came_from = {}
    g_score = {node: float('inf') for node in graph}
    g_score[start] = 0

    while open_set:
        _, current = heapq.heappop(open_set)

        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            return path[::-1]  # Reverse the path to get from start to goal

        for neighbor in graph[current]:
            tentative_g_score = g_score[current] + graph[current][neighbor]
            if tentative_g_score < g_score[neighbor]:
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g_score
                f_score = tentative_g_score + heuristic(neighbor, goal)
                heapq.heappush(open_set, (f_score, neighbor))

    return None  # No path found




RECURSIVE BREADTH FIRST SEARCH(RBFS)>>>>>>>>>>>>>>>>>>>

def rbfs(graph, current, goal, f_limit, heuristic):
    if current == goal:
        return [current], 0  # Return the path and its cost

    successors = graph[current]
    if not successors:
        return None, float('inf')  # No successors, return no path

    while True:
        best = None
        alternative = float('inf')

        for neighbor in successors:
            f = max(heuristic(neighbor, goal), graph[current][neighbor])
            if f > f_limit:
                alternative = min(alternative, f)
            else:
                successors.remove(neighbor)
                result, f = rbfs(graph, neighbor, goal, min(f_limit, alternative), heuristic)
                if result is not None:
                    result.insert(0, current)
                    return result, f  # Return the path and its cost

        if alternative == float('inf'):
            return None, float('inf')  # No path found


<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>