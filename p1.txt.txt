	                 ceaser cipher	encryption 


def encrypt_text(plaintext,n):
    ans = ""
    # iterate over the given text
    for i in range(len(plaintext)):
        ch = plaintext[i]
        
        # check if space is there then simply add space
        if ch==" ":
            ans+=" "
        # check if a character is uppercase then encrypt it accordingly 
        elif (ch.isupper()):
            ans += chr((ord(ch) + n-65) % 26 + 65)
        # check if a character is lowercase then encrypt it accordingly
        
        else:
            ans += chr((ord(ch) + n-97) % 26 + 97)
    
    return ans

plaintext = "HELLO EVERYONE"
n = 1
print("Plain Text is : " + plaintext)
print("Shift pattern is : " + str(n))
print("Cipher Text is : " + encrypt_text(plaintext,n))




<<<<<<<encryption+decryption>>>>>>>>>>>>>>>>>>>>>>>>>>


def caesar_encrypt(plaintext, shift):
    encrypted_text = ""
    for char in plaintext:
        if char.isalpha():  # Check if the character is a letter
            start = ord('a') if char.islower() else ord('A')
            encrypted_char = chr((ord(char) - start + shift) % 26 + start)
            encrypted_text += encrypted_char
        else:
            encrypted_text += char  # Keep non-alphabetic characters unchanged
    return encrypted_text

def caesar_decrypt(ciphertext, shift):
    return caesar_encrypt(ciphertext, -shift)

# Example usage:
plaintext = "Hello, World!"
shift = 3
encrypted_text = caesar_encrypt(plaintext, shift)
decrypted_text = caesar_decrypt(encrypted_text, shift)

print("Original:   ", plaintext)
print("Encrypted:  ", encrypted_text)
print("Decrypted:  ", decrypted_text)



		<<<<<<Rail fence>>>>>>>>>>>>>

def rail_fence_encrypt(plaintext, num_rails):
    return ''.join(plaintext[i::num_rails] for i in range(num_rails))

def rail_fence_decrypt(ciphertext, num_rails):
    cycle = len(ciphertext) // (2 * (num_rails - 1))
    return ''.join(ciphertext[i::num_rails] + ciphertext[i + 2 * (num_rails - 1) - i % (2 * (num_rails - 1))::num_rails] for i in range(cycle + 1))

# Example usage:
plaintext = "Hello, World!"
num_rails = 3
encrypted_text = rail_fence_encrypt(plaintext, num_rails)
decrypted_text = rail_fence_decrypt(encrypted_text, num_rails)

print("Original:   ", plaintext)
print("Encrypted:  ", encrypted_text)
print("Decrypted:  ", decrypted_text)



<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
