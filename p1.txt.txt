	                 ceaser cipher	encryption 


def encrypt_text(plaintext,n):
    ans = ""
    # iterate over the given text
    for i in range(len(plaintext)):
        ch = plaintext[i]
        
        # check if space is there then simply add space
        if ch==" ":
            ans+=" "
        # check if a character is uppercase then encrypt it accordingly 
        elif (ch.isupper()):
            ans += chr((ord(ch) + n-65) % 26 + 65)
        # check if a character is lowercase then encrypt it accordingly
        
        else:
            ans += chr((ord(ch) + n-97) % 26 + 97)
    
    return ans

plaintext = "HELLO EVERYONE"
n = 1
print("Plain Text is : " + plaintext)
print("Shift pattern is : " + str(n))
print("Cipher Text is : " + encrypt_text(plaintext,n))




<<<<<<<encryption+decryption>>>>>>>>>>>>>>>>>>>>>>>>>>



class CeasarCipher(object):
    """ generated source for class CeasarCipher """
    @classmethod
    def main(cls, args):
        """ generated source for method main """
        in_ = Scanner(System.in_)
        print ("Enter the plaintext message without space : ")
        plainText = in_.nextLine()
        key = 3
        plainText = plainText.toUpperCase()
        plainTextChar = plainText.toCharArray()
        # Encryption
        # Encryption
        i = 0
        while i < plainTextChar.length:
            # Encryption
            plainTextChar[i] = ((((plainTextChar[i]) + key - 65) % 26 + 65))
            i += 1
        print ("the Ciphertext message:")
        cipherText = String.valueOf(plainTextChar)
        print ("cipherText")
        plainTextChar = cipherText.toCharArray()
        # Decryption
        # Encryption
        # Decryption
        i = 0
        while i < plainTextChar.length:
            # Encryption
            # Decryption
            plainTextChar[i] = ((((plainTextChar[i]) - key - 65) % 26 + 65))
            i += 1
        recoveredPlainText = String.valueOf(plainTextChar).lower()
        print ("Recovered Plaintext message:")
        print ("recoveredPlainText")
