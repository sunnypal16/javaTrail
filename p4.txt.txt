	<<<<<<<<<<<<<<<<<digital signature >>>>>>>>>>>>


from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.primitives.asymmetric import rsa, padding

def generate_key_pair():
    private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
    public_key = private_key.public_key()
    return private_key, public_key

def sign_message(private_key, message):
    return private_key.sign(message.encode(), padding.PSS(mgf=padding.MGF1(hashes.SHA256()), salt_length=padding.PSS.MAX_LENGTH), hashes.SHA256())

def verify_signature(public_key, message, signature):
    try:
        public_key.verify(signature, message.encode(), padding.PSS(mgf=padding.MGF1(hashes.SHA256()), salt_length=padding.PSS.MAX_LENGTH), hashes.SHA256())
        return True
    except Exception:
        return False

# Example usage:
private_key, public_key = generate_key_pair()
message_to_sign = "Hello, this is a digitally signed message."

# Signing the message
signature = sign_message(private_key, message_to_sign)
print("Digital Signature:", signature.hex())

# Verifying the signature
is_valid = verify_signature(public_key, message_to_sign, signature)
print("Is Signature Valid?", is_valid)